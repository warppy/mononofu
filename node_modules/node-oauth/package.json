{
  "name": "node-oauth",
  "description": "A node.js client for OAuth API",
  "version": "0.1.0",
  "author": {
    "name": "EastCloud",
    "email": "info@east-cloud.co.jp"
  },
  "repository": {
    "type": "git",
    "url": "https://EastCloud@github.com/EastCloud/node-oauth.git"
  },
  "main": "./index",
  "engines": {
    "node": ">=0.4.0"
  },
  "licenses": [
    {
      "type": "Apache License, Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "readme": "node-oauth\n=\n\nAn adaptor for OAuth 1.0 and OAuth 2.0 API.\n\nInstall\n-\n\n    npm install node-oauth\n\n\nUsage\n-\n\nrequire `node-oauth`\n\n```js\nvar OAuth = require('node-oauth');\n\n```\n\nset your application OAuth setting file.\n\n```js\nOAuth = OAuth(\"sample/object-oauth.js\")\n\n```\n\njump to Login page\nresponse is necessary for redirect.\n\n```js\nOAuth.authorize('facebook',{\n    response: res,\n    endCallback: function(err) {\n      if(err)\n        onError(err);\n    }\n  });\n\n```\n\n(OAuth 1.0)\nif you don't want to go authorize, you can control after getting request token.\nAuthorizer object returns. It have setting datas on its fields.\n\n```js\nvar oauthAuthorizer = OAuth.authorize('twitter', {\n    auto: false\n  });\n\n```\n\nget access token in redirect page\nTokener object returns.\n\n```js\nvar oauthTokener = OAuth.access(oauth['type'], {\n        href: location.href\n      }, authorized);\n\n```\n\nif you want to set access_token externaly, ( that is , not via url )\n\n````\noauthTokener.set({\n  request_token: oauth['req_tkn'],\n  access_token: oauth['oac_tkn'],\n  access_token_secret: oauth['oac_tkn_scr']\n});\n\n````\n\naccess to api with name (set in setting file) / url.\n\n```js\noauthTokener.get(\"credentials\", {}, getId);\n\n```\n",
  "_id": "node-oauth@0.1.0",
  "_from": "node-oauth"
}
